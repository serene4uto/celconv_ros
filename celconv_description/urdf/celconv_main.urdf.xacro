<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="celconv">
  <xacro:include filename="$(find celconv_description)/urdf/celconv_cell.urdf.xacro"/>

  <!-- Define the number of rows and columns as input --> 
  <xacro:arg name="num_rows" default="1"/>
  <xacro:arg name="num_cols" default="1"/>

  <xacro:arg name="is_sim" default="false"/>
  <xacro:arg name="cam_fov_h" default="1.3962634"/>

  <xacro:arg name="prefix" default=""/>

  <xacro:property name="is_sim" value="$(arg is_sim)"/>
  <xacro:property name="num_rows" value="$(arg num_rows)"/>
  <xacro:property name="num_cols" value="$(arg num_cols)"/>

  <!-- Define the distance between cells -->
  <xacro:property name="dist_bias" value="0.000"/>
  <xacro:property name="row_dist" value="${dist_bias + 0.12}"/>
  <xacro:property name="col_dist" value="${dist_bias + 0.06928 * 1.5}"/>
  <xacro:property name="row" value="0"/>
  <xacro:property name="col" value="0"/>

  <!-- <xacro:property name="pi" value="3.14159265359"/> -->


  <link name="base_link"></link>

  <!-- Define a macro to handle cell creation and joint connection -->
  <xacro:macro name="create_cells" params="row col num_rows num_cols">
    <!-- Base case: if row >= num_rows, stop the recursion -->
    <xacro:if value="${row >= num_rows}">
      <!-- Recursion stops -->
    </xacro:if>

    <!-- Continue if more rows are to be processed -->
    <xacro:if value="${row &lt; num_rows}">
      <!-- Calculate y position -->
      <xacro:property name="y" value="${row * row_dist - (col % 2) * (row_dist / 2)}"/>
      <xacro:property name="x" value="${col * col_dist}"/>
      <xacro:property name="z" value="0"/>
      
      <!-- Handle cells in the current row -->
      <xacro:if value="${col &lt; num_cols}">
        <xacro:property name="cell_index" value="${row * num_cols + col}"/>
        <xacro:celconv_cell name="${cell_index}" 
                            parent_name="base"
                            color="1 1 1"
                            xyz="${x} ${y} ${z}"
                            rpy="0 0 0"
                            is_sim="$(arg is_sim)"/>

        <!-- Recurse for the next column -->
        <xacro:create_cells row="${row}" col="${col + 1}" num_rows="${num_rows}" num_cols="${num_cols}"/>
      </xacro:if>

      <!-- Move to the next row after finishing the current row's columns -->
      <xacro:if value="${col == num_cols}">
        <xacro:create_cells row="${row + 1}" col="0" num_rows="${num_rows}" num_cols="${num_cols}"/>
      </xacro:if>
    </xacro:if>
  </xacro:macro>

  <!-- Start the cell creation process -->
  <xacro:create_cells row="${row}" col="${col}" num_rows="${num_rows}" num_cols="${num_cols}"/>

  <!-- Define the camera -->

  <joint name="camera_joint" type="fixed">
    <origin xyz="${(num_cols-1) * col_dist * 0.5} ${(num_rows - 1.5) * row_dist * 0.5}  1" rpy="0 1.571 0"/>
    <parent link="base_link"/>
    <child link="camera_link"/>        
  </joint>

  <link name="camera_link">
    <visual>
      <origin xyz="-0.03 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.06 0.15 0.15" />
      </geometry>
      <material name="white" />
    </visual>
    <visual>
      <origin xyz="0.03 0 0 " rpy="0 ${pi/2} 0"/>
      <geometry>
        <cylinder length="0.06" radius="0.04" />
      </geometry>
      <material name="blue" >
        <color rgba="0 0 1 1"/> <!-- RGBA for blue color, fully opaque -->
      </material>
    </visual>
    <collision>
      <origin xyz="0.0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.15 0.15 0.12" />
      </geometry>
    </collision>
    <!-- <xacro:inertial_box mass="0.1" x="0.12" y="0.15" z="0.15">
      <origin xyz="0.0 0 0" rpy="0 0 0"/>
    </xacro:inertial_box> -->
  </link>


  <joint name="camera_optical_joint" type="fixed">
    <origin xyz="0 0 0" rpy="-1.571 0 -1.571" />
    <parent link="camera_link" />
    <child link="camera_link_optical" />
  </joint>

  <link name="camera_link_optical"></link>

  <gazebo reference="camera_link">
    <sensor type="camera" name="celconv_camera">
      <update_rate>30</update_rate>
      <visualize>true</visualize>
      <camera name="cam">
        <!-- <horizontal_fov>0.6981317</horizontal_fov> -->
        <!-- <horizontal_fov>1.3962634</horizontal_fov> -->
        <horizontal_fov>$(arg cam_fov_h)</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
           <near>0.02</near>
           <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <frame_name>camera_link_optical</frame_name>
        <min_depth>0.1</min_depth>
        <max_depth>500</max_depth>
      </plugin>
    </sensor>
  </gazebo>


  <xacro:if value="$(arg is_sim)">
    <gazebo>
      <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
        <parameters>$(find celconv_control)/config/$(arg prefix)_gazebo_control.yaml</parameters>
      </plugin>
    </gazebo>
  </xacro:if>

</robot>
